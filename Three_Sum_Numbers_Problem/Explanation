Q. Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []
 

Constraints:

0 <= nums.length <= 3000
-105 <= nums[i] <= 105

Explanation: As we have already seen two Sum Numbers problem. Lets try this three sum problem with different approaches. As per this problem description, 
we already know that here we have to deal with 3 numbers instead of 2. So, lets deal with one number in this problem and take help of our two sum approach.

Approach 1:
Just like two pointers approach in two sum numbers, here we have to sort the array first then take 1 number as start and then using two pointers called left and right we iterate these two ponters and check everytime whether the sum is equal to 0.

Approach 2:
We can also take help of our hashmap approach from two sum numbers and we will sort the array here first and then take 1 number as start and then call twoSum hashmap function to find out other two numbers. 



Time Complexity:
We have to consider here that TwoSum approach are in O(n) time complexity and we are adding this with third number using one more for loop for considering every
number from the given array, so this takes O(n) time conplexity. so time complexity for any approach here will be O(n^2).
But here one thing we need to consider is we are sorting this array before finding these numbers. Sorting array time complexity will be O(n logn).
When you multiply O(n^2) * O(nlogn) = O(n^2).

Space Complexity:
For first approach we are iterating with same array so space complexity is O(n). But for 2nd approach even though we are creating new hashmap and storing values its space complexity will be O(n) only. 
